package com.iptv.ipv6settings;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.InetAddress;import java.net.UnknownHostException;import java.util.regex.Matcher;import java.util.regex.Pattern;import android.app.Activity;import android.net.ethernet.EthernetManager;import android.os.Bundle;import android.os.Handler;import android.os.SystemProperties;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.inputmethod.EditorInfo;import android.widget.Button;import android.widget.Toast;import android.widget.TextView;import com.iptvipv6settings.common.UnityEditText;import com.iptv.ipv6settings.R;import com.nmp.support.Utility;@SuppressWarnings("deprecation")public class Ipv6SettingActivity extends Activity {		/**	 * JNI	 */	static {		System.loadLibrary("iptv_ipv6");	}	private int prefix;	public native int SetIpv6Add(String eth, String ipv6add, int prefix);			private final static int CONN_MODE_DHCP6 = 1;		private final static int CONN_MODE_MANUAL = 2;		private int CONN_MODE = 0;		private final static String TAG = "Ipv6SettingActivity";		private final static String DEV_NAME = "eth0";		private final static String FIXED_IPV6_INFO = "FIXED_IPV6_INFO";		private final static String FIXED_IPV6_ADD = "IPV6_ADDRESS";		private final static String FIXED_IPTV6_PREFIX = "IPV6_PREFIX";		private final static String FIXED_IPV6_ROUTER = "IPV6_ROUTER";		private final static String FIEXD_IPV6_DNSSERVER = "IPV6_DNS";		private final static byte Info_ipv6_ipaddr = 0;	private final static byte Info_ipv6_netmask = 1;	private final static byte Info_ipv6_gateway= 2;	private final static byte Info_ipv6_dns = 3;	private final static byte NUM_OF_Ipv6_Info = 4;		private AutoScene mAutoScene;	private ManualScene mManualScene;	private boolean mModeDhcp = true;	private EthernetManager mEthernetManager = null;		private InetAddress[] mAddresses = new InetAddress[NUM_OF_Ipv6_Info];	private String[] Ipv6Info = new String[NUM_OF_Ipv6_Info];			private SharedPreferences mSP; 	private Editor mSPEdt; 				@Override		protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);        Utility.getInstance().init(this);		setContentView(R.layout.setting_lan);				SystemProperties.set("ctl.start", "V6Server");						mSP = getSharedPreferences(FIXED_IPV6_INFO, Activity.MODE_PRIVATE);				    mSPEdt = mSP.edit();				mAutoScene = new AutoScene();		mManualScene = new ManualScene();		mAutoScene.show();	}	@Override	protected void onDestroy() {		super.onDestroy();	}	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {				Button btn;				View rootview;				switch (keyCode) {		case KeyEvent.KEYCODE_BACK:			//display("KeyEvent.KEYCODE_BACK");			if (mManualScene.getVisibility() == View.VISIBLE) {				mManualScene.hide();				mAutoScene.show();				return true;			} 			break;		case KeyEvent.KEYCODE_DPAD_LEFT:			rootview = this.getWindow().getDecorView();			int ID = rootview.findFocus().getId();			if (ID == R.id.setting_ipv6_manual) {								btn = (Button)findViewById(R.id.setting_ipv6_auto);				btn.requestFocus();							}			return true;		case KeyEvent.KEYCODE_DPAD_RIGHT:			rootview = this.getWindow().getDecorView();			int ID1 = rootview.findFocus().getId();			if (ID1 == R.id.setting_ipv6_auto) {								btn = (Button)rootview.findViewById(R.id.setting_ipv6_manual);				btn.requestFocus();						} 			return true;		case KeyEvent.KEYCODE_DPAD_UP:						break;					case KeyEvent.KEYCODE_DPAD_DOWN:						break;					case KeyEvent.KEYCODE_MUTE:		case KeyEvent.KEYCODE_VOLUME_MUTE:		case KeyEvent.KEYCODE_VOLUME_DOWN:		case KeyEvent.KEYCODE_VOLUME_UP:			return true;		}		return super.onKeyDown(keyCode, event);	}	private class Scene {		private View mContainer;		public Scene(int id) {			mContainer = findViewById(id);		}		public void show() {			mContainer.setVisibility(View.VISIBLE);		}		public void hide() {			mContainer.setVisibility(View.INVISIBLE);		}		public int getVisibility() {			return mContainer.getVisibility();		}	}	private class AutoScene extends Scene implements	 View.OnClickListener  {		private int[] mUetIds = { R.id.setting_lan_ip, R.id.setting_lan_mask,				R.id.setting_lan_gateway, R.id.setting_lan_dns };				private Button mFocusButton;				private Button mAutoBtn;				private Button mManualBtn;		private Handler mHandler; 				private TextView mTip;		public AutoScene() {			super(R.id.setting_main_view);			mTip = (TextView)findViewById(R.id.setting_lan_message);						mAutoBtn = (Button)findViewById(R.id.setting_ipv6_auto);						mFocusButton = mAutoBtn;						mManualBtn = (Button)findViewById(R.id.setting_ipv6_manual);						mAutoBtn.setOnClickListener(this);						mManualBtn.setOnClickListener(this);						mHandler = new Handler();						getIpv6Info();						updateIpInfo_acc();					}		@Override	    public void show() {			super.show();									mFocusButton.requestFocus();						}		@Override		public void onClick(View v) {			// TODO Auto-generated method stub			switch(v.getId()){						case R.id.setting_ipv6_auto:								mTip.setText(R.string.msg_auto_connecting);								doAutoConnect();							break;						case R.id.setting_ipv6_manual:				mAutoScene.hide();				mManualScene.show();				break;						}					}					public void updateIpInfo_acc() {								for (int i = 0; i < mUetIds.length; i++) {				TextView  uet = (TextView) findViewById(mUetIds[i]);				uet.setText(Ipv6Info[i]);			}		}		private void doAutoConnect(){					mHandler.postDelayed(new Runnable() {				@Override				public void run() {					mTip.setText(R.string.msg_connect_ok);					}				}, 2000);									mHandler.postDelayed(new Runnable() {				@Override				public void run() {					mTip.setText(" ");					}				}, 3000);								}				private void getIpv6Info(){						/**			 * So currently support manual configuration way only.			*/						if (CONN_MODE == CONN_MODE_DHCP6){							} else {								Ipv6Info[Info_ipv6_ipaddr] = mSP.getString(FIXED_IPV6_ADD, null);				Ipv6Info[Info_ipv6_netmask] = mSP.getString(FIXED_IPTV6_PREFIX, null);				Ipv6Info[Info_ipv6_gateway] = mSP.getString(FIXED_IPV6_ROUTER, null);				Ipv6Info[Info_ipv6_dns] = mSP.getString(FIEXD_IPV6_DNSSERVER, null);							}											}		}		private class ManualScene extends Scene implements			 View.OnClickListener {				private static final String LOGTAG = "ManualIpv6Set";		private int[] mUetIds_net = { R.id.setting_manual_ipaddr, R.id.setting_manual_netmask,				R.id.setting_manual_gateway, R.id.setting_manual_dnsserver};										private Handler mHandler;				private TextView mTip;				private UnityEditText ipv6dns;				private UnityEditText mFcousUet;				public ManualScene() {			super(R.id.setting_manual_view);			Button button = (Button) findViewById(R.id.ipv6_manual_save);			button.setOnClickListener(this);						mFcousUet = (UnityEditText)findViewById(R.id.setting_manual_ipaddr);						ipv6dns = (UnityEditText) findViewById(R.id.setting_manual_dnsserver);			ipv6dns.setOnEditorActionListener(mOnEditorActionListener);						mTip = (TextView)findViewById(R.id.ipv6_manual_save_tip);						getmanualIpv6Info();						mHandler = new Handler();																	}		@Override		public void show() {			super.show();			mFcousUet.requestFocus();		}		@Override		public void hide() {			super.hide();		}		@Override		public void onClick(View v) {			// TODO Auto-generated method stub						switch (v.getId()) {			case R.id.ipv6_manual_save:								for (int i  = 0; i < mUetIds_net.length; i++) {					UnityEditText  uet = (UnityEditText) findViewById(mUetIds_net[i]);										Ipv6Info[i] = uet.getText().toString();										if ( Ipv6Info[i].isEmpty() ) {												CheckResultTip(i);												return;											}										switch(i) {										case 0: 						if ( checkipv6add(Ipv6Info[i]) ){														continue;													}else{														CheckResultTip(i);														return;													}					case 1:												if(Ipv6Info[i].length() < Ipv6Info[i-1].length()) {														CheckResultTip(i);														return;						}												if ( Ipv6Info[i].substring(0,Ipv6Info[0].length()).equals(Ipv6Info[i - 1].toString()) ) {														if ( Ipv6Info[i].charAt(Ipv6Info[i - 1].length()) == '/'){															if ( ( prefix = Integer.parseInt( Ipv6Info[i].substring(Ipv6Info[i - 1].length() + 1, Ipv6Info[i].length()) ) ) < 128){																		continue;								} else {																		CheckResultTip(i);																		return;																	}															} else {																CheckResultTip(i);																return;								}													} else {														CheckResultTip(i);														return;						}					case 2: 						if ( checkipv6add(Ipv6Info[i]) ) {														continue;													}else{														CheckResultTip(i);														return;						}					case 3:						if ( checkipv6add(Ipv6Info[i]) ) {														continue;													}else{														CheckResultTip(i);														return;						}											}															 				}								mSPEdt.putString(FIXED_IPV6_ADD, Ipv6Info[Info_ipv6_ipaddr]);				mSPEdt.putString(FIXED_IPTV6_PREFIX, Ipv6Info[Info_ipv6_netmask]);				mSPEdt.putString(FIXED_IPV6_ROUTER, Ipv6Info[Info_ipv6_gateway]);				mSPEdt.putString(FIEXD_IPV6_DNSSERVER, Ipv6Info[Info_ipv6_dns]);								mSPEdt.commit();												mTip.setText(R.string.tip_text_save_ok);								mHandler.postDelayed(new Runnable() {					@Override					public void run() {						mTip.setText(" ");						}					}, 500);								mHandler.postDelayed(new Runnable() {					@Override					public void run() {						mManualScene.hide();						mAutoScene.show();						mAutoScene.updateIpInfo_acc();						mAutoScene.mTip.setText(R.string.msg_manual_connecting);						doManualConnect();						}					}, 500);								break;			default:				break;			}		}			UnityEditText.OnEditorActionListener mOnEditorActionListener = new UnityEditText.OnEditorActionListener(){			@Override			public boolean onEditorAction(UnityEditText view, int actionId,					KeyEvent event) {				// TODO Auto-generated method stub				switch(view.getId()){				case R.id.setting_manual_ipaddr:				case R.id.setting_manual_netmask:				case R.id.setting_manual_gateway:						break;				case R.id.setting_manual_dnsserver:					if(actionId == EditorInfo.IME_ACTION_DONE							|| actionId == EditorInfo.IME_ACTION_GO							|| actionId == EditorInfo.IME_ACTION_NEXT							|| actionId == EditorInfo.IME_ACTION_UNSPECIFIED							|| actionId == EditorInfo.IME_ACTION_SEND) {												ipv6dns.hideKeyboard();												return true;											}						break;				default :										break;									}								return false;							}					};				private void doManualConnect(){						//display("11"); 						//do_exec("busybox ifconfig");						//do_exec("busybox ifconfig eth0 add " + Ipv6Info[Info_ipv6_netmask].toString().trim());						//do_exec("busybox ifconfig eth0 2014::100/64 ");			//display("22"); 						//do_exec("busybox ifconfig");						Log.e(TAG,"Call jni");			switch (SetIpv6Add(DEV_NAME, Ipv6Info[Info_ipv6_netmask], prefix)) {						case 0 :								CONN_MODE = CONN_MODE_MANUAL;								mHandler.postDelayed(new Runnable() {				@Override				public void run() {					mAutoScene.mTip.setText(R.string.msg_connect_ok);					}				}, 2000);							mHandler.postDelayed(new Runnable() {				@Override				public void run() {					mAutoScene.mTip.setText(" ");					}				}, 3000);				Log.e(TAG,"set address sucess!");				break;						case -1: 				mHandler.postDelayed(new Runnable() {					@Override					public void run() {						mAutoScene.mTip.setText(R.string.msg_connect_fail);						}					}, 2000);									mHandler.postDelayed(new Runnable() {					@Override					public void run() {						mAutoScene.mTip.setText(" ");						}					}, 3000);					Log.e(TAG,"ioctl error!");					display("ioctl error!");					break;								case -2:									mHandler.postDelayed(new Runnable() {					@Override					public void run() {						mAutoScene.mTip.setText(R.string.msg_connect_fail);						}					}, 2000);									mHandler.postDelayed(new Runnable() {					@Override					public void run() {						mAutoScene.mTip.setText(" ");						}					}, 3000);					Log.e(TAG,"socket error!");					display("socket error!");					break;			}		}						private  String do_exec(String cmd) {			 			 	String[] cmdStrings = new String[] {"sh", "-c", cmd};		    	String ret = "";		    	try {		    		//Process p = Runtime.getRuntime().exec("su");		    							Process p = Runtime.getRuntime().exec(cmd);					BufferedReader in = new BufferedReader(										new InputStreamReader(p.getInputStream()));					String line = null;					while ((line = in.readLine()) != null) {						ret += line + "\n";									}					//p.destroy();				}catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				} 		    			    	//Log.e(LOGTAG, ret);		    	display(ret);				return ret;    			    }							public boolean StartCheck(String reg, String string){								boolean ret = false;								Pattern pattern = Pattern.compile(reg);  						        Matcher matcher = pattern.matcher(string); 		        		        ret = matcher.matches();								return ret;							}					 public boolean checkipv6add(String ipadd){		    			    	String reg = "^([\\da-fA-F]{1,4}:){6}((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}" + 		    					    			"(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|::([\\da−fA−F]1,4:)0,4((25[0−5]|2[0−4]\\d|[01]?\\d\\d?)\\.)3" + 		    					    			"(25[0−5]|2[0−4]\\d|[01]?\\d\\d?)|^([\\da-fA-F]{1,4}:):([\\da-fA-F]{1,4}:){0,3}((25[0-5]|2[0-4]" +		    					    			"\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|([\\da−fA−F]1,4:)2:([\\da−fA−F]1,4:)0,2" + 		    					    			"((25[0−5]|2[0−4]\\d|[01]?\\d\\d?)\\.)3(25[0−5]|2[0−4]\\d|[01]?\\d\\d?)|^([\\da-fA-F]{1,4}:){3}:" +		    					    			"([\\da-fA-F]{1,4}:){0,1}((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|" +		    					    			"([\\da−fA−F]1,4:)4:((25[0−5]|2[0−4]\\d|[01]?\\d\\d?)\\.)3(25[0−5]|2[0−4]\\d|[01]?\\d\\d?)|^([\\da-fA-F]" +		    					    			"{1,4}:){7}[\\da-fA-F]{1,4}|:((:[\\da−fA−F]1,4)1,6|:)|^[\\da-fA-F]{1,4}:((:[\\da-fA-F]{1,4}){1,5}|:)|" +		    					    			"([\\da−fA−F]1,4:)2((:[\\da−fA−F]1,4)1,4|:)|^([\\da-fA-F]{1,4}:){3}((:[\\da-fA-F]{1,4}){1,3}|:)|([\\da−fA−F]1," +		    					    			"4:)4((:[\\da−fA−F]1,4)1,2|:)|^([\\da-fA-F]{1,4}:){5}:([\\da-fA-F]{1,4})?|([\\da−fA−F]1,4:)6:";		    			    	return StartCheck(reg, ipadd);		    }		    		public void CheckResultTip(int tag){		    			    	if(Ipv6Info[tag].isEmpty()) {		    				    							mTip.setText(R.string.tip_text_empty);										mHandler.postDelayed(new Runnable() {						@Override						public void run() {							mTip.setText(" ");							}						}, 1000);		    							return;		    	}		    			    	Ipv6Info[tag] = null;						    	switch(tag) {		    		case 0:		    			mTip.setText(R.string.ipv6_add_format_tip);		    			break;		    		case 1:		    			mTip.setText(R.string.ipv6_add_format_tip_mask);		    			break;		    		case 2:		    			mTip.setText(R.string.ipv6_add_format_tip_router);		    			break;		    		case 3:		    			mTip.setText(R.string.ipv6_add_format_tip_DNS);		    			break;		    		default:		    			break;		    	}		    					mHandler.postDelayed( new Runnable(){					@Override					public void run() {						// TODO Auto-generated method stub						mTip.setText("");					}									}, 1000);		    			    			    }				private void getmanualIpv6Info(){					for(int i = 0; i < mUetIds_net.length; i++) {								UnityEditText mUet = (UnityEditText)findViewById(mUetIds_net[i]);				switch (i) {					case Info_ipv6_ipaddr: mUet.setText(mSP.getString(FIXED_IPV6_ADD, null));							break;					case Info_ipv6_netmask: mUet.setText(mSP.getString(FIXED_IPTV6_PREFIX, null));							break;					case Info_ipv6_gateway:	mUet.setText(mSP.getString(FIXED_IPV6_ROUTER, null)); 							break;					case Info_ipv6_dns: mUet.setText(mSP.getString(FIEXD_IPV6_DNSSERVER, null));							break;				}						}		}		}		public void display(String ss) {				Toast.makeText(this, ss,  Toast.LENGTH_LONG).show();			}}